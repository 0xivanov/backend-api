// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cars": {
            "get": {
                "description": "Get a list of cars with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car-controller"
                ],
                "summary": "Get all cars",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by car make",
                        "name": "carMake",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by garage ID",
                        "name": "garageId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by production year from",
                        "name": "fromYear",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by production year to",
                        "name": "toYear",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Car"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new car with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car-controller"
                ],
                "summary": "Create a new car",
                "parameters": [
                    {
                        "description": "Car object",
                        "name": "car",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Car"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Car"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cars/{id}": {
            "get": {
                "description": "Get details of a car by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car-controller"
                ],
                "summary": "Get a car by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Car"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Car not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of a car by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car-controller"
                ],
                "summary": "Update a car by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated car object",
                        "name": "car",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Car"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Car"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Car not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a car from the system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car-controller"
                ],
                "summary": "Delete a car by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Car deleted",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Car not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/garages": {
            "get": {
                "description": "Get a list of garages with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "garage-controller"
                ],
                "summary": "Get all garages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by city",
                        "name": "city",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Garage"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new garage with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "garage-controller"
                ],
                "summary": "Create a new garage",
                "parameters": [
                    {
                        "description": "Garage object",
                        "name": "garage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Garage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Garage"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/garages/{id}": {
            "get": {
                "description": "Get details of a garage by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "garage-controller"
                ],
                "summary": "Get a garage by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Garage ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Garage"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Garage not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of a garage by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "garage-controller"
                ],
                "summary": "Update a garage by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Garage ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated garage object",
                        "name": "garage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Garage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Garage"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Garage not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a garage from the system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "garage-controller"
                ],
                "summary": "Delete a garage by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Garage ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Garage deleted",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Garage not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/maintenance": {
            "get": {
                "description": "Get a list of maintenances with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maintenance-controller"
                ],
                "summary": "Get all maintenances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by car ID",
                        "name": "carId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by garage ID",
                        "name": "garageId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by start date (YYYY-MM-DD)",
                        "name": "startDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by end date (YYYY-MM-DD)",
                        "name": "endDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Maintenance"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new maintenance record with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maintenance-controller"
                ],
                "summary": "Create a new maintenance",
                "parameters": [
                    {
                        "description": "Maintenance object",
                        "name": "maintenance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Maintenance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Maintenance"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/maintenance/{id}": {
            "get": {
                "description": "Get details of a maintenance by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maintenance-controller"
                ],
                "summary": "Get a maintenance by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maintenance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Maintenance"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Maintenance not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of a maintenance by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maintenance-controller"
                ],
                "summary": "Update a maintenance by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maintenance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated maintenance object",
                        "name": "maintenance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Maintenance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Maintenance"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Maintenance not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a maintenance from the system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maintenance-controller"
                ],
                "summary": "Delete a maintenance by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maintenance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Maintenance deleted",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Maintenance not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Car": {
            "type": "object",
            "properties": {
                "garageIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "garages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Garage"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "licensePlate": {
                    "type": "string"
                },
                "make": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "productionYear": {
                    "type": "integer"
                }
            }
        },
        "models.CustomTime": {
            "type": "object",
            "properties": {
                "time.Time": {
                    "type": "string"
                }
            }
        },
        "models.Garage": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Maintenance": {
            "type": "object",
            "properties": {
                "carId": {
                    "type": "string"
                },
                "carName": {
                    "type": "string"
                },
                "garageId": {
                    "type": "string"
                },
                "garageName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "scheduledDate": {
                    "$ref": "#/definitions/models.CustomTime"
                },
                "serviceType": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8088",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Car Maintenance API",
	Description:      "This is a sample server for car maintenance.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
